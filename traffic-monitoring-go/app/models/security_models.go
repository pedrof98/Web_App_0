package models

import (
	"time"
)


// EventSeverity represents the severity level of a security event
type EventSeverity string

const (
	SeverityCritical EventSeverity = "critical"
	SeverityHigh	 EventSeverity = "high"
	SeverityMedium	 EventSeverity = "medium"
	SeverityLow	 	 EventSeverity = "low"
	SeverityInfo	 EventSeverity = "info"
)

// EventCategory represents the category of a security event
type EventCategory string

const (
	CategoryAuthentication EventCategory = "authentication"
	CategoryAuthorization  EventCategory = "authorization"
	CategoryNetwork	       EventCategory = "network"
	CategoryMalware	       EventCategory = "malware"
	CategorySystem	       EventCategory = "system"
	CategoryVehicle	       EventCategory = "vehicle"
	CategoryV2X	       	   EventCategory = "v2x"
)

// SecurityEvent represents a security-related event in the system
type SecurityEvent struct {
	ID				uint		`gorm:"primaryKey" json:"id"`
	Timestamp		time.Time	`gorm:"not null;index" json:"timestamp"`
	SourceIP		string		`json:"source_ip"`
	SourcePort		*int		`json:"source_port,omitempty"`
	DestinationIP	string		`json:"destination_ip,omitempty"`
	DestinationPort	*int		`json:"destination_port,omitempty"`
	Protocol		string		`json:"protocol,omitempty"`
	Action			string		`json:"action,omitempty"` //e.g., "allow", "block", "alert"
	Status			string		`json:"status,omitempty"` //e.g., "success", "failure"
	UserID			*uint		`json:"user_id,omitempty"`
	User			*User		`gorm:"foreignKey:UserID" json:"user,omitempty"`
	DeviceID		string		`json:"device_id,omitempty"`
	LogSourceID		uint		`json:"log_source_id"`
	LogSource		LogSource	`gorm:"foreignKey:LogSourceID" json:"log_source"`
	Severity		EventSeverity	`gorm:"not null" json:"severity"`
	Category		EventCategory	`gorm:"not null" json:"category"`
	Message			string		`gorm:"not null" json:"message"`
	RawData			string		`gorm:"type:text" json:"raw_data"`
	CreatedAt		time.Time	`gorm:"autoCreateTime" json:"created_at"`
}


// TableName returns the table name for SecurityEvent
func (SecurityEvent) TableName() string {
	return "security_events"
}


// LogSourceType represents the type of log source
type LogSourceType string

const (
	SourceTypeSystem		LogSourceType = "system"
	SourceTypeNetwork		LogSourceType = "network"
	SourceTypeApplication	LogSourceType = "application"
	SourceTypeVehicle		LogSourceType = "vehicle"
	SourceTypeSensor		LogSourceType = "sensor"
	SourceTypeStation		LogSourceType = "station"
)


// LogSource represents a source of security events
type LogSource struct {
	ID		uint		`gorm:"primaryKey" json:"id"`
	Name		string		`gorm:"not null" json:"name"`
	Type		LogSourceType	`gorm:"not null" json:"type"`
	Description	string		`json:"description"`
	Enabled		bool		`gorm:"not null;default:true" json:"enabled"`
	CreatedAt	time.Time	`gorm:"autoCreateTime" json:"created_at"`
	UpdatedAt	time.Time	`gorm:"autoUpdateTime" json:"updated_at"`
}


// TableName returns the table name for LogSource
func (LogSource) TableName() string {
	return "log_sources"
}


// RuleStatus represents the status of a security rule
type RuleStatus string

const (
	RuleStatusEnabled	RuleStatus = "enabled"
	RuleStatusDisabled	RuleStatus = "disabled"
	RuleStatusTesting	RuleStatus = "testing"
)

//Rule represents a detection rule for security events
type Rule struct {
	ID		uint		`gorm:"primaryKey" json:"id"`
	Name		string		`gorm:"not null;unique" json:"name"`
	Description	string		`json:"description"`
	Condition	string		`gorm:"not null" json:"condition"`
	Severity	EventSeverity	`gorm:"not null" json:"severity"`
	Category	EventCategory	`gorm:"not null" json:"category"`
	Status		RuleStatus	`gorm:"not null" json:"status"`
	CreatedBy	uint		`json:"created_by"`
	CreatedAt	time.Time	`gorm:"autoCreateTime" json:"created_at"`
	UpdatedAt	time.Time	`gorm:"autoUpdateTime" json:"updated_at"`
}


// TableName returns the table name for Rule
func (Rule) TableName() string {
	return "rules"
}


// AlertStatus represents the current status of an alert
type AlertStatus string

const (
	AlertStatusOpen			AlertStatus = "open"
	AlertStatusClosed		AlertStatus = "closed"
	AlertStatusInProgress		AlertStatus = "in_progress"
	AlertStatusFalsePositive	AlertStatus = "false_positive"
)



// Alert represents a security alert generated by the system
type Alert struct {
    ID             uint          `gorm:"primaryKey" json:"id"`
    RuleID         uint          `json:"rule_id"`
    Rule           Rule          `gorm:"foreignKey:RuleID" json:"rule"`
    SecurityEventID uint          `json:"security_event_id"`
    SecurityEvent  SecurityEvent `gorm:"foreignKey:SecurityEventID" json:"security_event"`
    Timestamp      time.Time     `gorm:"not null" json:"timestamp"`
    Severity       EventSeverity `gorm:"not null" json:"severity"`
    Status         AlertStatus   `gorm:"not null" json:"status"`
    AssignedTo     *uint         `json:"assigned_to,omitempty"`
    AssignedUser   *User         `gorm:"foreignKey:AssignedTo" json:"assigned_user,omitempty"`
    Resolution     string        `json:"resolution,omitempty"`
    CreatedAt      time.Time     `gorm:"autoCreateTime" json:"created_at"`
    UpdatedAt      time.Time     `gorm:"autoUpdateTime" json:"updated_at"`
}

// TableName returns the table name for Alert
func (Alert) TableName() string {
    return "alerts"
}














